package leetcode;

import java.util.Arrays;

/**
 * Created by DB_BOY on 2017/5/23.
 *
 * Given two strings s and t which consist of only lowercase letters.
 *
 * String t is generated by random shuffling string s and then
 * add one more letter at a random position.
 * Find the letter that was added in t.
 *
 * 给定两个字符串s和t，它们只包含小写字母。
 * 字符串t由随机字符串s生成，然后在随机位置添加一个字母。
 * 找到在t中添加的字母。
 */
public class FindDifference_389 {
    public static void main(String[] args) {
        String[] ss = {"abcdefg","aadb","kdkasdf","iadkfak","iwingu","aadb","kdhasdf","iajak","ahdb","kdkdf","iccak","ahggdb","kdkaadf","ieakabcdefgaadbkdkasdfiadkfak"};
        String[] ts = {"vabcdefg","aaadb","dkdkasdf","iagdkfak","iwhingu","ajadb","kdhkasdf","iajlak","ahudb","kdfkdf","icdcak","ahgbgdb","kdkadadf","ieakabcdefgaadbkdkasdfiadkfaka"};
        System.out.println(Arrays.asList(ss));
        System.out.println(Arrays.asList(ts));

        System.out.println(System.currentTimeMillis());
        for (int i =0,size = ss.length;i<size;i++){
            System.out.println(findThseDifference(ss[i],ts[i]));
        }
        System.out.println(System.currentTimeMillis());

    }

    public static char findThseDifference(String s, String t) {
        char[] sc = s.toCharArray();
        char[] tc = t.toCharArray();
        int i =0,length = sc.length;
        int sums =0,sumt=0;
        for(;i<length;i++){
            sums += sc[i];
            sumt += tc[i];
        }
        sumt += tc[length];
        return (char) (sumt - sums);

//        int[] arrs = new int[26];
//        char[] sc = s.toLowerCase().toCharArray();
//        char[] tc = t.toLowerCase().toCharArray();
//        int i =0,length = sc.length;
//        char cs,ct;
//        for(;i<length;i++){
//            cs = sc[i];
//            ct = tc[i];
//            arrs[cs-97] = arrs[cs-97]+1;
//            arrs[ct-97] = arrs[ct-97]-1;
//        }
//        ct = tc[length];
//        arrs[ct-97] = arrs[ct-97]-1;
//
//        for(i=0,length = arrs.length;i<length;i++){
//            if(arrs[i]<0){
//                return (char) (i+97);
//            }
//        }
//        return ' ';

//        char[] sc = s.toLowerCase().toCharArray();
//        char[] tc = t.toLowerCase().toCharArray();
//
//        Arrays.sort(sc);
//        Arrays.sort(tc);
//        int i = 0;
//        boolean flag = false;
//        int length =sc.length;
//        for(;i<length;i++){
//            if (tc[i]!=sc[i]) {
//                flag =true;
//                break;
//            }
//        }
//        return (flag ? tc[i] : tc[tc.length-1]);
    }
}
